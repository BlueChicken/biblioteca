#! /usr/bin/env python3

import json
import os
from glob import glob

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

JSON_PATH = os.path.join(BASE_DIR, 'src/???????.json')

OUTPUT_DIR = BASE_DIR

HEADER = ('## {id} - {name}\n'
          '<!-- THIS FILE IS AUTOGENERATED. DO NOT EDIT. -->\n\n')

ENTRY = '[**{type}{title}**]({link}){author}{comment}\n\n'

TYPE = '{type}: '

AUTHOR = ': *{author}*'

COMMENT = ' ({comment})'


def format_type(type_):
    if type_:
        return TYPE.format(type=type_)
    return ''


def format_author(author):
    if author:
        return AUTHOR.format(author=author)
    return ''


def format_comment(comment):
    if comment:
        return COMMENT.format(comment=comment)
    return ''


def format_entry(entry):
    type_ = format_type(entry.get('type', ''))
    author = format_author(entry.get('author', ''))
    comment = format_comment(entry.get('comment', ''))

    try:
        return ENTRY.format(
            type=type_,
            title=entry['title'],
            link=entry['link'],
            author=author,
            comment=comment,
        )
    except KeyError:
        raise KeyError('entry missing mandatory information (title or link)')


def format_header(data):
    try:
        return HEADER.format(
            id=data['id'],
            name=data['name'],
        )
    except KeyError:
        raise KeyError('header missing mandatory information (id or name)')


def format_md(data):
    header = format_header(data)

    return header + ''.join([format_entry(entry) for entry in data['entries']])


def json_to_md_filename(json_path):
    split = os.path.split(json_path)

    return os.path.join(split[0], (os.path.splitext(split[1])[0] + '.md'))


def json_to_md(json_path, md_path=None):
    md_path = md_path or json_to_md_filename(json_path)

    with open(json_path) as json_file:
        data = json.load(json_file)

    md_data = format_md(data)

    with open(md_path, 'w') as md_file:
        md_file.write(md_data)


def assign_term(term):
    if isinstance(term, int):
        return str(term) + 'a_fase'
    elif term is None:
        return 'optativas'

    raise KeyError(
        'unrecognized term. should have ran verify.py before building')


def output_file(json_path):
    with open(json_path) as json_file:
        data = json.load(json_file)

    return os.path.join(
        OUTPUT_DIR, assign_term(data['term']), data['id'] + '.md')


def create_dir(path):
    path_dir, _ = os.path.split(path)

    os.makedirs(path_dir, exist_ok=True)


if __name__ == '__main__':
    for path in glob(JSON_PATH):
        output = output_file(path)

        print(path, '->', output)

        create_dir(output)

        json_to_md(path, md_path=output)
