import os
import re
from sys import argv

README_HEADER = '''
# Biblioteca virtual do CALICO
'<!-- THIS FILE IS AUTOGENERATED. DO NOT EDIT. -->

Caso tenha algum material relevante, mande um pull request. :)

Encontrou um link quebrado? Abra uma [issue]\
(https://github.com/CalicoUFSC/Biblioteca/issues)!


## Sumário
'''.strip()


README_FOOTER = ''

GH_HEADER = '''
---
layout: default
---
<!-- THIS FILE IS AUTOGENERATED. DO NOT EDIT. -->

[repositório](https://github.com/CalicoUFSC/Biblioteca)

[facebook](https://www.facebook.com/ufsc.calico)

[calicoufsc@gmail.com](mailto:calicoufsc@gmail.com)

Caso tenha algum material relevante, mande um pull request. :)

Encontrou um link quebrado? Abra uma [issue]\
(https://github.com/CalicoUFSC/Biblioteca/issues)!

## Sumário
'''.strip()


GH_FOOTER = ''


ENTRY = '* [{}]({})\n'

SECTION = '\n#### {name}\n'


GITHUB_LINK = 'https://github.com/CalicoUFSC/biblioteca/blob/master/'

BASE_DIR = '..'

DIRS_REGEX = re.compile(r'(\d)a_fase|optativas')

translate_list = [
    'Primeira',
    'Segunda',
    'Terceira',
    'Quarta',
    'Quinta',
    'Sexta',
    'Sétima',
]


def extract_term(path):
    g1 = DIRS_REGEX.match(os.path.split(path)[1]).group(1)

    return int(g1) if g1 is not None else None


def extract_info(path):
    with open(path) as md_file:
        title = md_file.readline()

    return title.strip('#').strip()


def format_entry(full_path, link):
    name = extract_info(full_path)

    return ENTRY.format(name, link)


def format_section(term):
    if term is None:
        name = 'Optativas'
    else:
        name = translate_list[term - 1] + ' fase'

    return SECTION.format(name=name)


def resolve_link(path, file, full_links):
    dir_ = os.path.split(path)[1]

    if full_links:
        return GITHUB_LINK + os.path.join(dir_, file)
    else:
        return os.path.join(dir_, file)


def format_term(term_data, full_links):
    term, path, files = term_data

    if not files:
        return ''

    section = format_section(term)

    entries = [format_entry(os.path.join(path, file),
                            resolve_link(path, file, full_links))
               for file in files]

    return section + ''.join(entries)


def format_summary(data, header, footer, full_links=False):
    return (header +
            ''.join([format_term(d, full_links)
                     for d in data]) +
            footer)


if __name__ == '__main__':
    summary_dirs = sorted([os.path.join(BASE_DIR, i)
                           for i in os.listdir(BASE_DIR)
                           if DIRS_REGEX.match(i)])

    data = [(extract_term(d), d, sorted(os.listdir(d)))
            for d in summary_dirs]

    if '-h' in argv or '--help' in argv:
        print('usage: python3 summary.py [gh]')
        exit()

    if len(argv) > 1 and 'gh' in argv[1]:
        summary = format_summary(data, GH_HEADER, GH_FOOTER, full_links=True)
    else:
        summary = format_summary(data, README_HEADER, README_FOOTER)

    print(summary)
